# Import graph
- import_graph:
    from:
      $: "data"
    format: "ECharts"
    type: "directed"
    resolve_coreferences: true
    into: "graph"

# Delete initial data
- delete: "data"

# Get all proper nouns
- filterNodes:
    from:
      $: "graph"
    as: "$node"
    where: "$node.category === 'PROPN'"
    resolve_nodes: true
    into: "proper_nouns"

# Count POS categories
- reduceNodes:
    from:
      $: "graph"
    as: "$node"
    accumulator: "$categories"
    initialValue: {}
    reduce: "$categories[$node.category] = ($categories[$node.category] || 0) + 1, $categories"
    into: "pos_categories_count"

# Count types of dependencies
- reduceEdges:
    from:
      $: "graph"
    as: "$edge"
    accumulator: "$dependencies"
    initialValue: {}
    reduce: "$dependencies[$edge.value] = ($dependencies[$edge.value] || 0) + 1, $dependencies"
    into: "dependencies_count"

# Find node with name = "fight"
- findNode:
    from:
      $: "graph"
    as: "$node"
    where: "$node.name === 'fight'"
    resolve_nodes: true
    into: "fight_node"
# Get all dependencies of 'nsubj', 'obj' and 'advmod' types that come from "fight_node", and resolve target nodes
- filterOutEdges:
    from:
      $: "graph"
    as: "$edge"
    node:
      $: "fight_node"
    where: "$edge.value === 'nsubj' || $edge.value === 'obj' || $edge.value === 'advmod'"
    resolve_edges: true
    resolve_targets: true
    into: "fight_important_relations"

# Find key of the node with name = "army"
- findNode:
    from:
      $: "graph"
    as: "$node"
    where: "$node.name === 'army'"
    into: "army_node"
# Get names of all neighbors of "army" node
- mapNeighbors:
    from:
      $: "graph"
    as: "$neighbor"
    node:
      $: "army_node"
    map: "$neighbor.name"
    into: "army_neighbors"

# Add new node
- transform:
    from:
      $: "graph"
    action: >
      (graph) => graph.addNode('0-1', {
        name: 'anonymous',
        value: 'anonymous',
        category: 'NOUN'
      })

# Update node attributes by node key
- transform:
    from:
      $: "graph"
    action: >
      (graph) => graph.updateNode(
        '1-1',
        old => ({ ...old, name: 'somebody' })
      )

# Add new edge
- transform:
    from:
      $: "graph"
    action: >
      (graph) => graph.addEdgeWithKey('(1-1)->(0-1)', '1-1', '0-1', {
        value: 'coref'
      })

# Find keys of all punctuation nodes
- filterNodes:
    from:
      $: "graph"
    as: "$node"
    where: "$node.category === 'PUNCT'"
    into: "punctuations"
# Drop all punctuation nodes (and attached edges)
- transform:
    from:
      $: "punctuations"
    action: >
      (punctuations, { graph }) => punctuations.forEach(
        node => graph.dropNode(node)
      )

# Export graph as EChart
- export_graph:
      from:
          $: "graph"
      format: "ECharts"
      into: "chart"

# Export graph (default Graphology format)
- export_graph:
    from:
      $: "graph"
    into: "graph"
